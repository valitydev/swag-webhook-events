openapi: 3.0.0
info:
  version: 2.0.0
  title: Vality Webhooks Events API
  termsOfService: https://vality.dev/
  contact:
    name: Vality support team
    email: support@vality.dev
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: >
    ## Payment Webhook Events API


    The specification defines a protocol for delivering notifications about new
    payment events within your organisation. The notifications are deliveried by
    the system as HTTP requests to the URL of webhooks you created. Handlers for
    such kind of queries should be implemented on the side of your server code
    according to the specification.


    Webhook is a subscription to a specific type of event or group of events
    relating to different objects within your organisation. API methods
    described in the specification [Payment Webhook Management
    API](https://github.com/valitydev/swag-payments) are used to manage
    webhooks.


    When within the wallet one of the events occurs (e.g. a wallet status
    change), the system selects a webhook matching that event type and sends an
    HTTP request containing a JSON message to the URL specified in the webhook.
    If several webhooks matching this event type were created, the event is
    simultaneously delivered to all URLs specified in those webhooks in an
    undefined order.

    ## Delivery strategy

    The system guarantees events delivery order within a specific notification
    subject (invoice, payment, refund, etc.). The system maintains a message
    queue for each notification item to keep the sequence and ensure the
    guaranteed delivery.


    A delivery request is considered to be successful only when a response with
    status `200` is received. The system will wait for a successful response to
    the sent a request during 10 seconds. In case of a response with any other
    status or after expiration of the specified time which was reserved to
    process the notification, the system will try to re-deliver notifications
    until a successful response is received, or until a decision is made that it
    is impossible to deliver information. Delivery attempts will be made at the
    following time intervals between requests:

      - 30 seconds,

      - 5 minutes,

      - 15 minutes,

      - 1 hour.

      - every hour within 24 hours

    If the last attempt of notification delivery fails, all the events that have
    been accumulated in this payment queue are discarded.

    ## Received messages authorization

    The system confirms notifications authenticity by signing messages with a
    private key that is unique to each webhook, the paired public key of which
    is contained in the data of that webhook. The signature is transmitted in
    the HTTP header Content-Signature. Represented in various atributes the
    header contains the information about the algorithm used to create a
    signature and content of the signature in the format [URL-safe
    base-64](https://tools.ietf.org/html/rfc4648).


    ``` Content-Signature: alg=RS256;
    digest=zFuf7bRH4RHwyktaqHQwmX5rn3LfSb4dKo... ```


    At the moment the only one signature generation alorithm is possible to use.

    ### [RS256](https://tools.ietf.org/html/rfc7518#section-3.3)

    The signature is generated according to
    [RSASSA-PKCS1-v1_5](https://tools.ietf.org/html/rfc3447#section-8.2)
    algorithm , which itself uses result of message
    [SHA-256](https://tools.ietf.org/html/rfc6234) calculation.


    The set of header attributes and the list of possible signature generation
    algorithms can be expanded later.
servers:
  - url: https://merchant.site
tags:
  - name: Event Notifications
    x-displayName: Notifications
    description: Delivery of platform event notifications.
paths:
  /webhook:
    post:
      tags:
        - Event Notifications
      summary: Notify of an event
      operationId: notifyWebhookEvent
      parameters:
        - $ref: '#/components/parameters/signature'
      requestBody:
        description: Data from an event that occurred in the platform
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Notification processed
        '404':
          $ref: '#/components/responses/NotFound'
components:
  parameters:
    signature:
      name: Content-Signature
      in: header
      description: |
        Message signature formed according to the above rules
      required: true
      schema:
        type: string
  schemas:
    Event:
      description: Event data
      type: object
      required:
        - eventID
        - occuredAt
        - topic
        - eventType
      properties:
        eventID:
          description: Event identifier
          type: integer
        occuredAt:
          description: Date and time the event occurrence
          type: string
          format: date-time
        topic:
          description: Subject of notification
          type: string
          enum:
            - InvoicesTopic
            - CustomersTopic
        eventType:
          type: string
          description: Type of event that occurred
          enum:
            - InvoiceCreated
            - InvoicePaid
            - InvoiceCancelled
            - InvoiceFulfilled
            - PaymentStarted
            - PaymentProcessed
            - PaymentCaptured
            - PaymentCancelled
            - PaymentRefunded
            - PaymentFailed
            - RefundCreated
            - RefundPending
            - RefundSucceeded
            - RefundFailed
            - CustomerCreated
            - CustomerDeleted
            - CustomerReady
            - CustomerBindingStarted
            - CustomerBindingSucceeded
            - CustomerBindingFailed
      discriminator:
        propertyName: eventType
        mapping:
          InvoiceCreated: '#/components/schemas/InvoiceCreated'
          InvoicePaid: '#/components/schemas/InvoicePaid'
          InvoiceCancelled: '#/components/schemas/InvoiceCancelled'
          InvoiceFulfilled: '#/components/schemas/InvoiceFulfilled'
          PaymentStarted: '#/components/schemas/PaymentStarted'
          PaymentProcessed: '#/components/schemas/PaymentProcessed'
          PaymentCaptured: '#/components/schemas/PaymentCaptured'
          PaymentCancelled: '#/components/schemas/PaymentCancelled'
          PaymentRefunded: '#/components/schemas/PaymentRefunded'
          PaymentFailed: '#/components/schemas/PaymentFailed'
          RefundCreated: '#/components/schemas/RefundCreated'
          RefundPending: '#/components/schemas/RefundPending'
          RefundSucceeded: '#/components/schemas/RefundSucceeded'
          RefundFailed: '#/components/schemas/RefundFailed'
          CustomerCreated: '#/components/schemas/CustomerCreated'
          CustomerDeleted: '#/components/schemas/CustomerDeleted'
          CustomerReady: '#/components/schemas/CustomerReady'
          CustomerBindingStarted: '#/components/schemas/CustomerBindingStarted'
          CustomerBindingSucceeded: '#/components/schemas/CustomerBindingSucceeded'
          CustomerBindingFailed: '#/components/schemas/CustomerBindingFailed'
    InvoiceCartLine:
      description: Product or service item
      type: object
      required:
        - product
        - quantity
        - price
        - cost
      properties:
        product:
          description: Description of the goods or services offered
          type: string
          maxLength: 1000
        quantity:
          description: |
            Number of units of goods or services offered in this item
          type: integer
          format: int64
          minimum: 1
          default: 1
        price:
          description: >
            The price of the good or service offered, in minor monetary units,
            e.g. cents if U.S. dollars are specified as the currency
          type: integer
          format: int64
          minimum: 1
        cost:
          description: >
            The total value of the item, taking into account the number of units
            of goods or services
          type: integer
          format: int64
          minimum: 1
        taxMode:
          description: >
            The tax mode for the proposed good or service.To be specified only
            if the proposed good or service is taxable.
          type: object
          required:
            - rate
          properties:
            rate:
              description: VAT rate
              type: string
              enum:
                - 0%
                - 10%
                - 18%
                - 20%
                - 10/110
                - 18/118
                - 20/120
    Invoice:
      description: Invoice data
      type: object
      required:
        - id
        - shopID
        - createdAt
        - status
        - dueDate
        - amount
        - currency
        - metadata
        - product
      properties:
        id:
          description: Invoice ID
          type: string
        shopID:
          description: Shop ID
          type: string
          format: string
        createdAt:
          description: Date and time of creation
          type: string
          format: date-time
        status:
          description: Invoice status
          type: string
          enum:
            - unpaid
            - cancelled
            - paid
            - refunded
            - fulfilled
        reason:
          description: Reason for invoice cancellation or redemption
          type: string
        dueDate:
          description: Expiration date and time
          type: string
          format: date-time
        amount:
          description: >
            The price of the goods or services offered, in minor monetary units,
            e.g.

            cents if U.S. dollars are specified as the currency
          type: integer
          format: int64
          minimum: 1
        currency:
          description: >
            Currency character code according to

            [ISO
            4217](http://www.iso.org/iso/home/standards/currency_codes.htm).
          type: string
        metadata:
          description: Invoice metadata
          type: object
        product:
          description: Name of the offered goods or services
          type: string
        description:
          description: Description of the goods or services offered
          type: string
        cart:
          description: |
            A shopping cart with a list of items of provided goods or services
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: '#/components/schemas/InvoiceCartLine'
        externalId:
          description: Merchant's transaction identifier
          type: string
    InvoiceCreated:
      description: Invoice creation event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
    InvoicePaid:
      description: >
        The event of full payment of an invoice, which is the reason to start
        providing goods or services to the payer
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
    InvoiceCancelled:
      description: >
        Invoice cancellation event with reason, e.g. expiration of the invoice
        due date
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
    InvoiceFulfilled:
      description: Invoice fulfillment event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
    SubError:
      description: Detailed description of the error
      type: object
      required:
        - code
      properties:
        code:
          description: Details of the error code
          type: string
        subError:
          $ref: '#/components/schemas/SubError'
    PaymentError:
      description: |
        [Error occurred during the payment process](#tag/Error-Codes)
      type: object
      required:
        - code
        - message
      properties:
        code:
          description: Basic error code
          type: string
        message:
          description: >
            **Deprecated.** _Use `subError` to detail the error description._
            Error description
          type: string
        subError:
          $ref: '#/components/schemas/SubError'
    Payer:
      type: object
      required:
        - payerType
      properties:
        payerType:
          description: Payment tool type
          type: string
          enum:
            - CustomerPayer
            - PaymentResourcePayer
            - RecurrentPayer
      discriminator:
        propertyName: payerType
        mapping:
          CustomerPayer: '#/components/schemas/CustomerPayer'
          PaymentResourcePayer: '#/components/schemas/PaymentResourcePayer'
          RecurrentPayer: '#/components/schemas/RecurrentPayer'
    CustomerPayer:
      type: object
      allOf:
        - $ref: '#/components/schemas/Payer'
        - type: object
          required:
            - customerID
          properties:
            customerID:
              description: Customer ID
              type: string
    PaymentToolDetails:
      type: object
      description: Payment tool details
      required:
        - detailsType
      properties:
        detailsType:
          description: Type of payment tool
          type: string
          enum:
            - PaymentToolDetailsBankCard
            - PaymentToolDetailsPaymentTerminal
            - PaymentToolDetailsDigitalWallet
            - PaymentToolDetailsCryptoWallet
            - PaymentToolDetailsMobileCommerce
      discriminator:
        propertyName: detailsType
        mapping:
          PaymentToolDetailsBankCard: '#/components/schemas/PaymentToolDetailsBankCard'
          PaymentToolDetailsPaymentTerminal: '#/components/schemas/PaymentToolDetailsPaymentTerminal'
          PaymentToolDetailsDigitalWallet: '#/components/schemas/PaymentToolDetailsDigitalWallet'
          PaymentToolDetailsCryptoWallet: '#/components/schemas/PaymentToolDetailsCryptoWallet'
          PaymentToolDetailsMobileCommerce: '#/components/schemas/PaymentToolDetailsMobileCommerce'
    BankCardDetails:
      required:
        - bin
        - lastDigits
        - cardNumberMask
        - paymentSystem
      properties:
        bin:
          description: Card issuing bank BIN
          type: string
          pattern: ^\d{6,8}$
        lastDigits:
          description: Card last digits
          type: string
          pattern: ^\d{2,4}$
        cardNumberMask:
          description: Masked card number
          type: string
          pattern: ^\d{6,8}\*+\d{2,4}$
        paymentSystem:
          description: Payment system
          type: string
          maxLength: 100
        tokenProvider:
          description: Payment token provider
          type: string
          enum:
            - applepay
            - googlepay
            - samsungpay
            - yandexpay
            - unknown
          deprecated: true
        tokenProviderName:
          description: Payment token provider
          type: string
        issuerCountry:
          description: Issuing country (alpha-3 code according to ISO_3166-1)
          type: string
          example:
            - RUS
            - POL
            - USA
        bankName:
          description: Bank name
          type: string
          example:
            - SBERBANK OF RUSSIA
            - JOINT STOCK COMPANY ALFA-BANK
            - VTB BANK OJSC
    PaymentToolDetailsBankCard:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaymentToolDetails'
        - $ref: '#/components/schemas/BankCardDetails'
    PaymentTerminalDetails:
      required:
        - provider
        - providerName
      properties:
        provider:
          type: string
          enum:
            - euroset
            - wechat
            - alipay
            - qps
            - uzcard
            - unknown
          deprecated: true
        providerName:
          type: string
    PaymentToolDetailsPaymentTerminal:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaymentToolDetails'
        - $ref: '#/components/schemas/PaymentTerminalDetails'
    DigitalWalletDetails:
      required:
        - digitalWalletDetailsType
      properties:
        digitalWalletDetailsType:
          type: string
          enum:
            - DigitalWalletDetailsQIWI
      discriminator:
        propertyName: digitalWalletDetailsType
        mapping:
          DigitalWalletDetailsQIWI: '#/components/schemas/DigitalWalletDetailsQIWI'
    DigitalWalletDetailsQIWI:
      allOf:
        - $ref: '#/components/schemas/DigitalWalletDetails'
        - type: object
          required:
            - phoneNumberMask
          properties:
            phoneNumberMask:
              type: string
              description: |
                Masked phone number of the payer in international format
              pattern: ^\+\d\*{1,10}\d{2,4}$
              example: +7******3210
    PaymentToolDetailsDigitalWallet:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaymentToolDetails'
        - $ref: '#/components/schemas/DigitalWalletDetails'
    CryptoCurrency:
      description: Cryptocurrency type
      type: string
      enum:
        - bitcoin
        - litecoin
        - bitcoinCash
        - ripple
        - ethereum
        - zcash
        - unknown
      deprecated: true
    CryptoCurrencyType:
      description: Cryptocurrency type
      type: string
    CryptoWalletDetails:
      required:
        - cryptoCurrency
      properties:
        cryptoCurrency:
          $ref: '#/components/schemas/CryptoCurrency'
        cryptoCurrencyType:
          $ref: '#/components/schemas/CryptoCurrencyType'
    PaymentToolDetailsCryptoWallet:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaymentToolDetails'
        - $ref: '#/components/schemas/CryptoWalletDetails'
    MobileCommerceDetails:
      required:
        - phoneNumber
      properties:
        phoneNumber:
          description: Masked cell phone number
          type: string
          pattern: ^\+\d\*{1,10}\d{2,4}$
          example: +7******0102
    PaymentToolDetailsMobileCommerce:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaymentToolDetails'
        - $ref: '#/components/schemas/MobileCommerceDetails'
    ClientInfo:
      description: Payer's client device data
      type: object
      required:
        - fingerprint
      properties:
        ip:
          description: Payer IP-address
          type: string
          format: ip-address
          maxLength: 45
        fingerprint:
          description: Payer's user agent unique fingerprint
          type: string
          maxLength: 1000
    PaymentResource:
      type: object
      description: Payment tool details
      required:
        - paymentSession
        - paymentToolToken
      properties:
        paymentToolToken:
          description: Payment tool token provided by the payer
          type: string
          maxLength: 1000
        paymentSession:
          description: Payment session identifier
          type: string
          maxLength: 1000
        paymentToolDetails:
          $ref: '#/components/schemas/PaymentToolDetails'
        clientInfo:
          $ref: '#/components/schemas/ClientInfo'
    ContactInfo:
      description: Payer's contact information
      type: object
      properties:
        email:
          description: Email address
          type: string
          format: email
          maxLength: 100
        phoneNumber:
          description: >
            Mobile phone number with international prefix according to
            [E.164](https://en.wikipedia.org/wiki/E.164).
          type: string
          format: ^\+\d{4,15}$
    PaymentResourcePayer:
      type: object
      description: Payment resource
      allOf:
        - $ref: '#/components/schemas/Payer'
        - $ref: '#/components/schemas/PaymentResource'
        - type: object
          required:
            - contactInfo
          properties:
            contactInfo:
              $ref: '#/components/schemas/ContactInfo'
    PaymentRecurrentParent:
      type: object
      description: >
        Parent payment, on the basis of which the current recurrent payment was
        created
      required:
        - invoiceID
        - paymentID
      properties:
        invoiceID:
          description: Invoice ID
          type: string
        paymentID:
          description: Payment ID
          type: string
    RecurrentPayer:
      type: object
      description: Recurring payment tool based on another payment
      allOf:
        - $ref: '#/components/schemas/Payer'
        - type: object
          required:
            - contactInfo
            - recurrentParentPayment
          properties:
            contactInfo:
              $ref: '#/components/schemas/ContactInfo'
            recurrentParentPayment:
              $ref: '#/components/schemas/PaymentRecurrentParent'
    Payment:
      description: Invoice payment data
      type: object
      required:
        - id
        - createdAt
        - status
        - amount
        - currency
        - paymentSession
        - contactInfo
        - payer
      properties:
        id:
          description: Payment ID
          type: string
        createdAt:
          description: Date and time of creation
          type: string
          format: date-time
        status:
          description: Payment status
          type: string
          enum:
            - pending
            - processed
            - captured
            - cancelled
            - refunded
            - failed
        error:
          $ref: '#/components/schemas/PaymentError'
        amount:
          description: >
            The price of the goods or services offered, in minor monetary units,
            e.g. cents if U.S. dollars are specified as the currency
          type: integer
          format: int64
          minimum: 1
        currency:
          description: >
            Currency character code according to

            [ISO
            4217](http://www.iso.org/iso/home/standards/currency_codes.htm).
          type: string
        metadata:
          description: Payment metadata
          type: object
        paymentToolToken:
          description: |
            **Deprecated.** _Use the `payer` property._

            Payment tool token
          type: string
        paymentSession:
          description: |
            **Deprecated.** _Use the `payer` property._

            Payment session identifier
          type: string
        contactInfo:
          description: |
            **Deprecated.** _Use the `payer` property._

            Payer contact information
          type: object
          properties:
            email:
              description: Email address
              type: string
            phoneNumber:
              description: Phone number
              type: string
        ip:
          description: |
            **Deprecated.** _Use the `payer` property._

            Payer's IP-address
          type: string
        fingerprint:
          description: |
            **Deprecated.** _Use the `payer` property._

            Payer's fingerprint
          type: string
        payer:
          $ref: '#/components/schemas/Payer'
        fee:
          description: |
            System fee in minor monetary units.
          type: integer
          format: int64
        rrn:
          description: |
            Retrieval reference number
          type: string
        externalId:
          description: Merchant's transaction identifier
          type: string
        extraPaymentInfo:
          description: >
            Additional details about the payment, e.g. masked payer's card
            number.
          type: object
    PaymentStarted:
      description: Invoice payment start event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
    PaymentProcessed:
      description: Payment processing success event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
    PaymentCaptured:
      description: |
        Payment successful completion event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
    PaymentCancelled:
      description: >
        Payment cancelation event, as a result of which the charge of funds from
        the payer is canceled
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
    PaymentRefunded:
      description: Successful payment refund event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
    PaymentFailed:
      description: >
        An event of unsuccessful completion of payment with a reason, e.g. in
        case of if the payer does not have sufficient funds available
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
    Refund:
      description: Refund data within the payment
      type: object
      required:
        - id
        - createdAt
        - status
        - amount
        - currency
      properties:
        id:
          description: Refund identifier
          type: string
        createdAt:
          description: Date and time of creation
          type: string
          format: date-time
        status:
          description: Refund status
          type: string
          enum:
            - pending
            - succeeded
            - failed
        error:
          description: >
            Description of the error that occurred during the refund process, if
            the

            refund was unsuccessful
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
            message:
              type: string
        amount:
          description: >
            Refund amount in minor monetary units, e.g. cents if U.S. dollars
            are specified as the currency
          type: integer
          format: int64
          minimum: 1
        currency:
          description: >
            Currency character code according to [ISO
            4217](http://www.iso.org/iso/home/standards/currency_codes.htm).
          type: string
        reason:
          description: Refund reason
          type: string
        rrn:
          description: |
            Retrieval reference number
          type: string
    RefundCreated:
      description: Payment refund start event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
            - refund
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
            refund:
              $ref: '#/components/schemas/Refund'
    RefundPending:
      description: Refund pending status event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
            - refund
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
            refund:
              $ref: '#/components/schemas/Refund'
    RefundSucceeded:
      description: Event of successful completion of a refund
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
            - refund
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
            refund:
              $ref: '#/components/schemas/Refund'
    RefundFailed:
      description: Event of unsuccessful completion of a refund
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - invoice
            - payment
            - refund
          properties:
            invoice:
              $ref: '#/components/schemas/Invoice'
            payment:
              $ref: '#/components/schemas/Payment'
            refund:
              $ref: '#/components/schemas/Refund'
    Customer:
      description: Customer details
      type: object
      required:
        - id
        - shopID
        - status
        - contactInfo
        - metadata
      properties:
        id:
          description: Customer ID
          type: string
        shopID:
          description: Shop ID
          type: string
        status:
          description: Customer status
          type: string
          enum:
            - ready
            - unready
        contactInfo:
          $ref: '#/components/schemas/ContactInfo'
        metadata:
          description: Customer metadata
          type: object
    CustomerCreated:
      description: Customer creation event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - customer
          properties:
            customer:
              $ref: '#/components/schemas/Customer'
    CustomerDeleted:
      description: Customer deletion event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - customer
          properties:
            customer:
              $ref: '#/components/schemas/Customer'
    CustomerReady:
      description: Event on the occurrence of the customer's readiness to make payment
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - customer
          properties:
            customer:
              $ref: '#/components/schemas/Customer'
    CustomerBindingError:
      description: Description of the error that occurred during the binding process
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
    CustomerBindingStatus:
      description: Status of binding the customer to the payment tool
      type: object
      required:
        - status
      properties:
        status:
          description: Binding status
          type: string
          enum:
            - pending
            - succeeded
            - failed
        error:
          $ref: '#/components/schemas/CustomerBindingError'
    CustomerBinding:
      description: Binding of the customer to the payment tool
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerBindingStatus'
        - type: object
          required:
            - id
            - paymentResource
          properties:
            id:
              description: Customer binding identifier
              type: string
            paymentResource:
              $ref: '#/components/schemas/PaymentResource'
    CustomerBindingStarted:
      description: Customer binding creation event
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - customer
            - binding
          properties:
            customer:
              $ref: '#/components/schemas/Customer'
            binding:
              $ref: '#/components/schemas/CustomerBinding'
    CustomerBindingSucceeded:
      description: Event about successful binding of the customer to the payment tool
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - customer
            - binding
          properties:
            customer:
              $ref: '#/components/schemas/Customer'
            binding:
              $ref: '#/components/schemas/CustomerBinding'
    CustomerBindingFailed:
      description: Event about unsuccessful binding of the customer to the payment tool
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - customer
            - binding
          properties:
            customer:
              $ref: '#/components/schemas/Customer'
            binding:
              $ref: '#/components/schemas/CustomerBinding'
    GeneralError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
  responses:
    NotFound:
      description: Target resource not found
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/GeneralError'
